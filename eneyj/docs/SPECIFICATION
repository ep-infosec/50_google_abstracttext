== Specification of eneyj ==

(A preceding x means this is not implemented yet.
A preceding * means that this is an idea and is not implemented yet.)

1) Z Objects

1.1) Everything is a Z Object.
     Z Objects are the only data structure.
     Code and data are both represented as Z Objects.
     Z Objects are also called eneyj objects.

1.2) Z Objects are immutable.

1.3) Z Objects are sets of key-value pairs.

1.4) Keys of key-value pairs of Z Objects are either global or local.

1.5) Global keys concatenate a Z Id, the letter K, and a number.

1.6) Local keys concatenate the letter K and a number in the decimal system,
     starting with 1 with no leading zeros.

1.7) The number in local keys must be consecutive.

1.8) Every key on a Z Object must be unique.

1.9) Values of key-value pairs of all Z Objects must be Z Objects.

1.10) Every Z Object must have a key Z1K1 Object-Type.

Idea: Make keys evaluable (not implemented)
*1.11) The key of a JSON key-value pair is evaluated as follows:
       a) if the key is a Z ID, this is parsed as a Z9 reference
       b) if the key is a serialized functioncall, it is parsed as such
       c) the result is evaluated
       d) if the resulting Z Object is of type Z3 key, this is the result
       e) if the resulting Z Object is of another Type, we check for a
          conversion function. The conversion function is applied to that
          object. Return to step c).
       f) if there is no conversion function, an error is thrown.

2) Normal JSON serialization

2.1) Every Z Object is serializable as a JSON object.

2.2) The normal serialization results in valid JSON per IETF RFC 7159.

2.3) Every eneyj implementation must support reading the normal JSON
     serialization.

2.4) Every eneyj implementation may support other serializations. Other
     serializations will often be more compact or have other advantages.

2.5) The normal JSON serialization serializes a single Z Object as a single
     JSON Object.

2.6) A single JSON file contains a single Z Object.

x2.7) The keys are sorted alphabetically for the letters and numerically for the
      number parts of the keys.

x2.8) If the key is Z1K1 Type, Z1K2 Id or Z6K1 Stringvalue the value is always
      serialized as a simple string.

x2.9) All other values are serialized as JSON objects using normal serialization.

3) Canonical JSON serialization

3.1) The Canonical JSON serialization is a more compact serialization, that is
     easier to read and write for humans.

3.2) The Canonical JSON serialization is the one used for Wikilambda and the
     reference implementation for storing Z Objects.

3.3) An eneyj implementation should be able to read the Canonical serialization.

3.4) If an eneyj implementation writes Z Objects out, it must support either the
     Normal or the Canonical serialization, or both.

3.5) Z9 References are written as simple string values instead of full-fledged
     Z Objects.

3.6) Z1K2 Id and Z6K1 Stringvalue is always written as a simple string value.

3.7) Z6 Strings are written as Z Objects if they start with a capital letter
     followed with a digit (unless they are on Z1K2 or Z6K1 keys).
     Otherwise they are written as simple string values.

3.8) A Z10 List is serialized as an Array in the JSON serialization.
     This is skipped if the Z10 List has any keys besides Z10K1 Head and
     Z10K2 Tail.

4) IDs

4.1) A Z Object may have a Z1K2 ID.

4.2) A Z Object that is being persisted must have a Z1K2 ID.

4.3) The Z1K2 ID is used to refer to the Z Object.

4.4) Z1K2 IDs must be unique.
     Two different Z Objects must not have the same Z1K2 ID.
     Two Z Objects that are equal may have two different Z IDs, though.

x4.5) The Z1K2 ID has the form of a capital letter X, Y, or Z followed by a
      natural decimal number.
      It may be followed by the letter K and another natural decimal number.

4.6) Z1K2 IDs starting with Z are reserved for Wikilambda.

*4.7) Z1K2 IDs starting with Y are reserved for the team / organization working
      together and sharing a global space.

*4.8) Z1K2 IDs starting with X are reserved for personal definitions.

*4.9) Z Objects in the personal space may refer to the team or global space, but
      team or global space object must not refer to the personal space.

*4.10) Z Object in the team space may refer to the global space, but Z Objects
       in the global space must not refer to the team space.

4.11) Two Z Objects with the same Z1K2 ID must be equal.
      This is modulo QA procedures, caching, and metadata.
      They are equal using Z33 same.

4.12) A Z Object that is not persisted does not have a Z1K2 ID.
      These are called transient Z Objects.

5) Labels

5.1) Every Z Object may have Z1K3 labels in different languages.

5.2) An eneyj implementation may use the labels to render Z Objects.

5.3) An eneyj implementation may use the Z1K3 labels and Z1K5 aliases to
     support the selection of a Z Object by the user.

x5.4) A label must be unique per language.
      I.e. only one Z Object may have a specific label in a given language.
*5.4 alternative) A label must be unique per language and type.
      (Not sure which one is better in the long turm. I guess the alternative.)

x5.5) Labels must consist of letters from the standard alphabet of the given
      language. Digits, spaces or special characters besides the underscore
      are not allowed.

6) Validation

x6.1) Every Z Object that fulfills the conditions in Section 1 is a
      well-formed Z Object.

x6.2) A well-formed Z Object gets validated against all functions in their
      types Z4K3 list of validators.

x6.3) A validator function is a function that takes a single parameter, the
      instance, and returns Z54 true or else an exception or error.

x6.4) The validators are called one after the other, and only the first
      exception or error is returned.

x6.5) Instead of continuing with evaluation, the exception or error is raised.

x6.4) A well-formed Z Object that passes all validators of its type is a
      valid instance of its type and a valid Z Object.

7) Evaluation

x7.1) Every valid Z Object gets evaluated by calling its type's Z4K6 evaluator
      function.

x7.2) An evaluator function takes a single parameter, the instance.

x7.3) The evaluation result in turn gets validated and evaluated again.

x7.4) This stops when a fix point is reached, i.e. the result of the evaluation
      is the same as its argument.

8) Linearization

x8.1) There are two different linearization functions: reversible and readable.

x8.2) Reversible linearization results in a string that can be parsed by the
      parser to build a new Z Object which is Z33 same as the Z Object it
      was linearized from.

x8.5) Reversible linearization is the result of a call to the Z4K4 linearizer on
      the given object and the Z180 language to use for linearizaton.

*x8.6) Readable linearization is the result of a call to the Z63 show function
       on the given object and the Z180 language to use for linearizaton.

*x8.7) The language can be Abstract, in which case IDs are used instead of
      labels.

(Linearizers are still confusing. This needs a better design doc.
* It seems we need two different linearizers, and thus should have two
  different keys.
* linearizer(one, English) should become "positive_integer("1")", but
  linearizer([one], English) should be "[one]")

*9) Parser / Constructor

x9.1) There is a single function, Z parse, that turns a string into a Z Object,
      given a language.

x9.2) That function needs to be extended if new syntactic sugar is being added,
      e.g. for understanding array notation using "[]".

*9.3) Check what's up with constructions.

10) Type system

10.1) Every Z1 Z Object has a Z1K1 type of type Z4.

x10.2) The type sysem is strict.

x10.3) There is no type hierarchy.

(*10.4) The Types have a number of fields used for dispatching functions.
        Maybe that shouldn't be like this. We need a design doc for dispatching.)

11) Errors

*11.1) Errors are raised for unrecoverable situations.

*11.2) When an error is encountered, it is always raised up as an error.

*11.3) Errors should be wrapped in other errors, that allow to trace the error.

12) Exceptions

*12.1) Exceptions are raised for unexpected, but potentially recoverable
       situations.

*12.2) A function can choose to handle an exception, but has to do so
       explicitly.

*12.3) When not being handled, exceptions should be wrapped and raised.

*12.4) Exceptions to be handled must be part of the signature.

*12.5) Exceptions must be handled since they are part of the signature.

13) All functions are pure functions

14) Dispatch functions based on type

== Mapping of ID characters throughout Wikidata and Wikilambda ==

B - Bad objects (with errors, only for testing)
C ? Implementation / Code (Z) (should be Z, this should be removed)
E - Entity shapes (Wikidata)
F - Form (L)
K - Key (Z)
L - Lexeme (Wikidata)
M - Media File (Commons) (?)
T ? Test (Z Function) (should be Z, this should be removed)
P - Property (Wikidata)
Q - Item (Wikidata)
S - Sense (L)
X o Personal Z Object
Y o Institutional Z Object
Z - Z Object (Wikilambda)

== Questions ==

How does Conversion work, if at all?
How are Conversions chained?
Is the Conversion Function attached to the target type or the start type?

Are implementations subentities of functions?
Or are they entities of their own?
If the latter, do functions point to their implementations?
Or do implementations point to their functions?

(Looks like the answer is:
Implementations are their own objects. Implementations point to functions.
This way we can freeze functions and yet add implementations.)

Are types and functions the same?
How do parametrized types work?
